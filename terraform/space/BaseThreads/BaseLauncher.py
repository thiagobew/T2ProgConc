from threading import Thread
from typing import Tuple
from Abstractions.AbstractSpaceBase import AbstractSpaceBase
from Enum.Enum import Planets, Polo, Rockets
from Synchronization.MoonResourcesSync import MoonSupplySync
from space.rocket import Rocket
from Synchronization.LaunchSync import LaunchSync
from Synchronization.PlanetsSync import PlanetsSync

import globals


class BaseLauncherThread(Thread):
    """Classe para controlar o setor de ataque de m√≠sseis da base"""

    def __init__(self, baseInstance: AbstractSpaceBase, target=None, name=None, args=None,  kwargs=None, daemon=None) -> None:
        self.base: AbstractSpaceBase = baseInstance
        self.__rocketInPlatform: Rocket = None

        super().__init__(None, target, name, args, kwargs, daemon=daemon)

    def run(self):
        print(f'[{self.base.name} LAUNCHER] -> Iniciando opera√ß√µes')

        while (globals.get_release_system() == False):
            pass

        # O que limita lan√ßamento de foguetes √© a quantidade de recursos dispon√≠veis
        # e se um foguete j√° ocupa a base, n√£o podem 2 serem lan√ßados ao mesmo tempo
        while True:
            # Aguarda um foguete no estoque
            self.base.semRocketInStorage.acquire()

            # print(f'[{self.base.name} - Launcher] -> Removendo foguete do Estoque')
            # Remove o foguete do estoque e coloca na plataforma
            self.base.rocketsStorageMutex.acquire()
            self.__rocketInPlatform = self.base.storage.pop(0)
            self.base.rocketsStorageMutex.release()

            # Libera sem√°foro de espa√ßo vazio no estoque
            self.base.semSpaceInStorage.release()

            # Verifica se teve um lan√ßamento com sucesso a ativa a Thread para cuidar do voyage
            if self.__rocketInPlatform.successfully_launch(self.base):
                voyageThread = Thread(target=self.__voyageRocket, args=(self.__rocketInPlatform,))
                voyageThread.start()
            else:  # Se rocket falhado foi Lion libera para outra base tentar enviar o Lion tamb√©m
                if self.__rocketInPlatform.name == Rockets.LION:
                    MoonSupplySync().supplierSem.release()

    def __voyageRocket(self, rocket: Rocket):
        """Fun√ß√£o que controla a viagem do foguete"""
        if rocket.name == Rockets.LION:
            print(f'üöÄ üåë - [{self.base.name} - Launcher] -> Foguete lan√ßado para a Lua')
            moonBase = globals.get_bases_ref()['moon']

            rocket.voyage((moonBase,))
        else:
            print(f'üöÄ ü™ê - [{self.base.name} - Launcher] -> Foguete lan√ßado contra planetas')
            destiny = self.__getRocketDestiny()
            rocket.voyage(destiny)

    def __getRocketDestiny(self) -> Tuple[Planets, Polo]:
        # Adquire um sem√°foro que possui a quantidade de alvos poss√≠veis para atacar
        LaunchSync().semFreePlanets.acquire()

        planetsSync = PlanetsSync()
        planetsDict = globals.get_planets_ref()
        for planetName, planet in planetsDict.items():
            # Boleano se conseguiu pegar o Lock de um planeta
            northFree = False
            southFree = False

            northFree = planetsSync.polesMutexDic[Polo.NORTH][planetName].acquire(blocking=False)
            if not northFree:  # Se n√£o conseguiu o polo norte tenta o Sul
                southFree = planetsSync.polesMutexDic[Polo.SOUTH][planetName].acquire(
                    blocking=False)

            if northFree:
                return (planet, Polo.NORTH)

            if southFree:
                return (planet, Polo.SOUTH)
